import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.distributions.empirical_distribution import ECDF
from get_args import get_args
from pathlib import Path
import datetime
from functions import functions, get_target_log_prob
from utils import hamiltonian_wrapper, hnn_wrapper, create_hnn_model, compute_metrics, run_sampling, process_samples
from tfp_modified_kernels.tfp_hnn_nuts_online import NoUTurnSampler



def plot_figure7_comparison(samples_nuts, samples_lhnn1, samples_lhnn2, samples_lhnn3, burn_in):
    """
    generate figure 7: compare the empirical cumulative distribution functions (eCDFs) 
    of traditional nuts and three lhnn

    Parameters
    ----------
    samples_nuts : np.ndarray
        the samples generated by traditional nuts
    samples_lhnn1/2/3 : np.ndarray
        the samples generated by three different lhnn
    burn_in : int
        the number of samples to discard
    """
    # remove the burn-in samples
    samples_nuts = samples_nuts[:, burn_in:, :]
    samples_lhnn1 = samples_lhnn1[:, burn_in:, :]
    samples_lhnn2 = samples_lhnn2[:, burn_in:, :]
    samples_lhnn3 = samples_lhnn3[:, burn_in:, :]

    plt.figure(figsize=(15, 4))

    # q1 figure
    plt.subplot(131)
    x_eval = np.linspace(-3, 3, 1000)
    ecdf_nuts = ECDF(samples_nuts[0, :, 0])
    ecdf_lhnn1 = ECDF(samples_lhnn1[0, :, 0])
    ecdf_lhnn2 = ECDF(samples_lhnn2[0, :, 0])
    ecdf_lhnn3 = ECDF(samples_lhnn3[0, :, 0])
    
    plt.plot(x_eval, ecdf_nuts(x_eval), 'k-', label='NUTS')
    plt.plot(x_eval, ecdf_lhnn1(x_eval), 'r--', label='L-HNN 1')
    plt.plot(x_eval, ecdf_lhnn2(x_eval), 'b--', label='L-HNN 2')
    plt.plot(x_eval, ecdf_lhnn3(x_eval), 'g--', label='L-HNN 3')
    plt.title('q1')
    plt.xlabel('Value')
    plt.ylabel('Probability')
    plt.legend()
    plt.grid(True, alpha=0.3)

    # q2 figure
    plt.subplot(132)
    x_eval = np.linspace(0, 8, 1000)
    ecdf_nuts = ECDF(samples_nuts[0, :, 1])
    ecdf_lhnn1 = ECDF(samples_lhnn1[0, :, 1])
    ecdf_lhnn2 = ECDF(samples_lhnn2[0, :, 1])
    ecdf_lhnn3 = ECDF(samples_lhnn3[0, :, 1])
    
    plt.plot(x_eval, ecdf_nuts(x_eval), 'k-', label='NUTS')
    plt.plot(x_eval, ecdf_lhnn1(x_eval), 'r--', label='L-HNN NUTS T=100')
    plt.plot(x_eval, ecdf_lhnn2(x_eval), 'b--', label='L-HNN NUTS T=150')
    plt.plot(x_eval, ecdf_lhnn3(x_eval), 'g--', label='L-HNN NUTS T=250')
    plt.title('q2')
    plt.xlabel('Value')
    plt.ylabel('Probability')
    plt.legend()
    plt.grid(True, alpha=0.3)

    # q3 figure
    plt.subplot(133)
    x_eval = np.linspace(0, 80, 1000)
    ecdf_nuts = ECDF(samples_nuts[0, :, 2])
    ecdf_lhnn1 = ECDF(samples_lhnn1[0, :, 2])
    ecdf_lhnn2 = ECDF(samples_lhnn2[0, :, 2])
    ecdf_lhnn3 = ECDF(samples_lhnn3[0, :, 2])
    
    plt.plot(x_eval, ecdf_nuts(x_eval), 'k-', label='NUTS')
    plt.plot(x_eval, ecdf_lhnn1(x_eval), 'r--', label='L-HNN 1')
    plt.plot(x_eval, ecdf_lhnn2(x_eval), 'b--', label='L-HNN 2')
    plt.plot(x_eval, ecdf_lhnn3(x_eval), 'g--', label='L-HNN 3')
    plt.title('q3')
    plt.xlabel('Value')
    plt.ylabel('Probability')
    plt.legend()
    plt.grid(True, alpha=0.3)

    # save the figure
    figures_dir = Path("figures")
    if not figures_dir.exists():
        figures_dir.mkdir(parents=True)
        print(f"\nCreate directory: {figures_dir}")

    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = figures_dir / f'figure_7_comparison_{timestamp}.png'
    plt.savefig(filename, dpi=300, bbox_inches='tight')
    plt.tight_layout()
    plt.show()

def run_comparison():
    """run the comparison experiment and generate the figure."""
    # set the basic parameters
    args = get_args()
    args.dist_name = 'nD_Rosenbrock'
    args.input_dim = 6  # 3D Rosenbrock
    args.latent_dim = 100
    args.total_samples = 100
    args.burn_in = 50
    args.nuts_step_size = 0.025
    args.save_dir = 'files'

    # create the traditional nuts kernel
    nuts_kernel = NoUTurnSampler(
        hnn_model=lambda x: hamiltonian_wrapper(x, args, functions),
        hamiltonian_function=lambda x: hamiltonian_wrapper(x, args, functions),
        target_log_prob_fn=lambda x: get_target_log_prob(x, args.dist_name, args.input_dim),
        step_size=args.nuts_step_size,
        unrolled_leapfrog_steps=1)

    # create three lhnn models
    hnn_model1 = create_hnn_model(args)
    hnn_model2 = create_hnn_model(args)
    hnn_model3 = create_hnn_model(args)

    # call the model once to create variables
    dummy_input = tf.zeros([1, args.input_dim])
    _ = hnn_model1(dummy_input)
    _ = hnn_model2(dummy_input)
    _ = hnn_model3(dummy_input)

    # load different weights
    hnn_model1.load_weights(f"{args.save_dir}/nD_Rosenbrock100")
    hnn_model2.load_weights(f"{args.save_dir}/nD_Rosenbrock150")
    hnn_model3.load_weights(f"{args.save_dir}/nD_Rosenbrock250")

    # create lhnn kernels
    lhnn_kernel1 = NoUTurnSampler(
        hnn_model=lambda x: hnn_wrapper(x, hnn_model1),
        hamiltonian_function=lambda x: hamiltonian_wrapper(x, args, functions),
        target_log_prob_fn=lambda x: get_target_log_prob(x, args.dist_name, args.input_dim),
        step_size=args.nuts_step_size,
        unrolled_leapfrog_steps=1)
    lhnn_kernel2 = NoUTurnSampler(
        hnn_model=lambda x: hnn_wrapper(x, hnn_model2),
        hamiltonian_function=lambda x: hamiltonian_wrapper(x, args, functions),
        target_log_prob_fn=lambda x: get_target_log_prob(x, args.dist_name, args.input_dim),
        step_size=args.nuts_step_size,
        unrolled_leapfrog_steps=1)
    lhnn_kernel3 = NoUTurnSampler(
        hnn_model=lambda x: hnn_wrapper(x, hnn_model3),
        hamiltonian_function=lambda x: hamiltonian_wrapper(x, args, functions),
        target_log_prob_fn=lambda x: get_target_log_prob(x, args.dist_name, args.input_dim),
        step_size=args.nuts_step_size,
        unrolled_leapfrog_steps=1)

    # initial state
    initial_state = tf.zeros([1, args.input_dim//2], dtype=tf.float32)

    # run the sampling
    print("\n===== run the traditional nuts =====")
    samples_nuts, kernel_results_nuts = run_sampling(
        nuts_kernel, initial_state, args.total_samples, args.burn_in)

    print("\n===== run the lhnn 1 =====")
    samples_lhnn1, kernel_results_lhnn1 = run_sampling(
        lhnn_kernel1, initial_state, args.total_samples, args.burn_in)

    print("\n===== run the lhnn 2 =====")
    samples_lhnn2, kernel_results_lhnn2 = run_sampling(
        lhnn_kernel2, initial_state, args.total_samples, args.burn_in)

    print("\n===== run the lhnn 3 =====")
    samples_lhnn3, kernel_results_lhnn3 = run_sampling(
        lhnn_kernel3, initial_state, args.total_samples, args.burn_in)

    # process the samples
    samples_nuts = process_samples(samples_nuts)
    samples_lhnn1 = process_samples(samples_lhnn1)
    samples_lhnn2 = process_samples(samples_lhnn2)
    samples_lhnn3 = process_samples(samples_lhnn3)

    # compute and record the performance metrics
    metrics_nuts = compute_metrics(samples_nuts.numpy(), kernel_results_nuts, "Traditional_NUTS", figure_num=7, burn_in=0)
    metrics_lhnn1 = compute_metrics(samples_lhnn1.numpy(), kernel_results_lhnn1, "LHNN_1", figure_num=7, burn_in=0)
    metrics_lhnn2 = compute_metrics(samples_lhnn2.numpy(), kernel_results_lhnn2, "LHNN_2", figure_num=7, burn_in=0)
    metrics_lhnn3 = compute_metrics(samples_lhnn3.numpy(), kernel_results_lhnn3, "LHNN_3", figure_num=7, burn_in=0)

    # generate the comparison figure
    plot_figure7_comparison(
        samples_nuts.numpy(), 
        samples_lhnn1.numpy(), 
        samples_lhnn2.numpy(), 
        samples_lhnn3.numpy(), 
        burn_in=0
    )

if __name__ == "__main__":
    import os
    os.environ['KMP_DUPLICATE_LIB_OK'] = 'TRUE'
    
    try:
        run_comparison()
    except Exception as e:
        print("\nError occurred:")
        print(e)
        import traceback
        traceback.print_exc() 