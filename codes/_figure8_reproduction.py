import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.distributions.empirical_distribution import ECDF
from get_args import get_args
from pathlib import Path
import datetime
from functions import functions, get_target_log_prob
from utils import hamiltonian_wrapper, hnn_wrapper, create_hnn_model, compute_metrics, run_sampling, process_samples
from tfp_modified_kernels.tfp_hnn_nuts_online import NoUTurnSampler



def plot_figure8_comparison(samples_nuts, samples_lhnn, burn_in):
    """
    generate figure 8: compare the sampling results of traditional nuts and lhnn

    Parameters
    ----------
    samples_nuts : np.ndarray
        the samples generated by traditional nuts
    samples_lhnn : np.ndarray
        the samples generated by lhnn
    burn_in : int
        the number of samples to discard
    """
    # remove the burn-in samples
    samples_nuts = samples_nuts[:, burn_in:, :]
    samples_lhnn = samples_lhnn[:, burn_in:, :]

    plt.figure(figsize=(15, 4))

    # scatter plot
    plt.subplot(131)
    plt.scatter(samples_nuts[0, :, 0], samples_nuts[0, :, 1],
                alpha=0.5, label='NUTS', color='blue', s=1)
    plt.scatter(samples_lhnn[0, :, 0], samples_lhnn[0, :, 1],
                alpha=0.5, label='L-HNN', color='red', s=1)
    plt.xlabel('q1')
    plt.ylabel('q2')
    plt.legend()
    plt.title('(a)')
    plt.grid(True, alpha=0.3)

    # eCDF of q1
    plt.subplot(132)
    x_eval = np.linspace(-5, 15, 1000)
    ecdf_nuts = ECDF(samples_nuts[0, :, 0])
    ecdf_lhnn = ECDF(samples_lhnn[0, :, 0])

    plt.plot(x_eval, ecdf_nuts(x_eval), 'b-', label='NUTS')
    plt.plot(x_eval, ecdf_lhnn(x_eval), 'r--', label='L-HNN')
    plt.xlabel('q1')
    plt.ylabel('Probability')
    plt.legend()
    plt.title('(b)')
    plt.grid(True, alpha=0.3)

    # eCDF of q2
    plt.subplot(133)
    x_eval = np.linspace(-600, 600, 1000)
    ecdf_nuts = ECDF(samples_nuts[0, :, 1])
    ecdf_lhnn = ECDF(samples_lhnn[0, :, 1])

    plt.plot(x_eval, ecdf_nuts(x_eval), 'b-', label='NUTS')
    plt.plot(x_eval, ecdf_lhnn(x_eval), 'r--', label='L-HNN')
    plt.xlabel('q2')
    plt.ylabel('Probability')
    plt.legend()
    plt.title('(c)')
    plt.grid(True, alpha=0.3)

    # save the figure
    figures_dir = Path("figures")
    if not figures_dir.exists():
        figures_dir.mkdir(parents=True)
        print(f"\nCreate directory: {figures_dir}")

    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = figures_dir / f'figure_8_comparison_{timestamp}.png'
    plt.savefig(filename, dpi=300, bbox_inches='tight')
    plt.tight_layout()
    plt.show()

def run_comparison():
    """run the comparison experiment and generate the figure."""
    # set the basic parameters
    args = get_args()
    args.dist_name = '2D_Neal_funnel'
    args.input_dim = 4  # 2D Neal's funnel
    args.latent_dim = 2
    args.total_samples = 100
    args.burn_in = 50
    args.nuts_step_size = 0.025
    args.save_dir = 'files'

    # create the traditional nuts kernel
    nuts_kernel = NoUTurnSampler(
        hnn_model=lambda x: hamiltonian_wrapper(x, args, functions),
        hamiltonian_function=lambda x: hamiltonian_wrapper(x, args, functions),
        target_log_prob_fn=lambda x: get_target_log_prob(x, args.dist_name, args.input_dim),
        step_size=args.nuts_step_size,
        unrolled_leapfrog_steps=1)

    # create the lhnn model
    hnn_model = create_hnn_model(args)

    # call the model once to create variables
    dummy_input = tf.zeros([1, args.input_dim])
    _ = hnn_model(dummy_input)

    # load the weights
    hnn_model.load_weights(f"{args.save_dir}/2D_Neal_funnel250")

    # create the lhnn kernel
    lhnn_kernel = NoUTurnSampler(
        hnn_model=lambda x: hnn_wrapper(x, hnn_model),
        hamiltonian_function=lambda x: hamiltonian_wrapper(x, args, functions),
        target_log_prob_fn=lambda x: get_target_log_prob(x, args.dist_name, args.input_dim),
        step_size=args.nuts_step_size,
        unrolled_leapfrog_steps=1)

    # initial state
    initial_state = tf.zeros([1, args.input_dim//2], dtype=tf.float32)

    # run the sampling
    print("\n===== run the traditional nuts =====")
    samples_nuts, kernel_results_nuts = run_sampling(
        nuts_kernel, initial_state, args.total_samples, args.burn_in)

    print("\n===== run the lhnn =====")
    samples_lhnn, kernel_results_lhnn = run_sampling(
        lhnn_kernel, initial_state, args.total_samples, args.burn_in)

    # process the samples
    samples_nuts = process_samples(samples_nuts)
    samples_lhnn = process_samples(samples_lhnn)

    # compute and record the performance metrics
    metrics_nuts = compute_metrics(samples_nuts.numpy(), kernel_results_nuts, "Traditional_NUTS", figure_num=8, burn_in=0)
    metrics_lhnn = compute_metrics(samples_lhnn.numpy(), kernel_results_lhnn, "LHNN", figure_num=8, burn_in=0)

    # generate the comparison figure
    plot_figure8_comparison(
        samples_nuts.numpy(), 
        samples_lhnn.numpy(), 
        burn_in=0
    )

if __name__ == "__main__":
    import os
    os.environ['KMP_DUPLICATE_LIB_OK'] = 'TRUE'
    
    try:
        run_comparison()
    except Exception as e:
        print("\nError occurred:")
        print(e)
        import traceback
        traceback.print_exc() 