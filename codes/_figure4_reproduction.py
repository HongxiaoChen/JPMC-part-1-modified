import tensorflow as tf
import matplotlib.pyplot as plt
from get_args import get_args
from pathlib import Path
import datetime
from functions import functions, FunctionModel, get_target_log_prob
from utils import hamiltonian_wrapper, hnn_wrapper, create_hnn_model, run_sampling, process_samples
from tfp_modified_kernels.tfp_hnn_nuts import NoUTurnSampler

def plot_figure4(samples_lhnn_no_monitor):
    """
    generate figure 4: show the sampling results of lhnn without error monitoring
    
    Parameters
    ----------
    samples_lhnn_no_monitor : np.ndarray
        the samples generated by lhnn without error monitoring
    """
    plt.figure(figsize=(15, 4))

    # q1 
    plt.subplot(131)
    plt.plot(samples_lhnn_no_monitor[0, :, 0], 'k-', linewidth=1)
    plt.title('q1')
    plt.xlabel('Sample index')
    plt.ylabel('Value')
    plt.ylim(-3, 3)
    plt.grid(True, alpha=0.3)

    # q2 
    plt.subplot(132)
    plt.plot(samples_lhnn_no_monitor[0, :, 1], 'k-', linewidth=1)
    plt.title('q2')
    plt.xlabel('Sample index')
    plt.ylabel('Value')
    plt.ylim(-2, 9)
    plt.grid(True, alpha=0.3)

    # q3 
    plt.subplot(133)
    plt.plot(samples_lhnn_no_monitor[0, :, 2], 'k-', linewidth=1)
    plt.title('q3')
    plt.xlabel('Sample index')
    plt.ylabel('Value')
    plt.ylim(-1, 80)
    plt.grid(True, alpha=0.3)

    # save the figure
    figures_dir = Path("figures")
    if not figures_dir.exists():
        figures_dir.mkdir(parents=True)
        print(f"\nCreate directory: {figures_dir}")

    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = figures_dir / f'figure_4_reproduction_{timestamp}.png'
    plt.savefig(filename, dpi=300, bbox_inches='tight')
    plt.tight_layout()
    plt.show()

def run_figure4():
    """run the experiment and generate figure 4"""
    # set the basic parameters
    args = get_args()
    args.dist_name = 'nD_Rosenbrock'
    args.input_dim = 6  # 3D Rosenbrock
    args.latent_dim = 100
    args.total_samples = 50  # use less samples, consistent with the paper
    args.burn_in = 0  # no need to burn-in
    args.nuts_step_size = 0.025
    args.save_dir = 'files'

    # create the lhnn model
    hnn_model = create_hnn_model(args)
    
    # call the model once to create variables
    dummy_input = tf.zeros([1, args.input_dim])
    _ = hnn_model(dummy_input)
    
    # load the weights
    hnn_model.load_weights(f"{args.save_dir}/lhnn_3d_rosenbrock")

    # create the nuts kernel (without error monitoring)
    lhnn_kernel = NoUTurnSampler(
        hnn_model=lambda x: hnn_wrapper(x, hnn_model),
        target_log_prob_fn=lambda x: get_target_log_prob(x, args.dist_name, args.input_dim),
        step_size=args.nuts_step_size,
        unrolled_leapfrog_steps=1)

    # initial state
    initial_state = tf.zeros([1, args.input_dim//2], dtype=tf.float32)

    # run the sampling
    print("\n===== run the sampling without error monitoring =====")
    samples, kernel_results = run_sampling(
        lhnn_kernel, initial_state, args.total_samples, args.burn_in)

    # process the samples
    samples = process_samples(samples)

    # generate the figure
    plot_figure4(samples.numpy())

if __name__ == "__main__":
    import os
    os.environ['KMP_DUPLICATE_LIB_OK'] = 'TRUE'
    
    try:
        run_figure4()
    except Exception as e:
        print("\nError occurred:")
        print(e)
        import traceback
        traceback.print_exc() 